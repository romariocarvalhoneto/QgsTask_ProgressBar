# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ProgressBar
                                 A QGIS plugin
 A progress bar
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-06-24
        git sha              : $Format:%H$
        copyright            : (C) 2020 by romario
        email                : romariocarvalho@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5 import QtGui
from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication#, QThread
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDialog, QProgressBar, QTableWidget, QComboBox   #, QVBoxLayout
from PyQt5.QtWidgets import *
import time
#from PyQt5.QtCore import QgsTask      #, QThread, pyqtSignal
from qgis.core import QgsTask, Qgis, QgsProject, QgsApplication
from qgis.utils import iface

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .inicial_dialog import InicialDialog
import os.path

class ProgressBar:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ProgressBar_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Progress Bar')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ProgressBar', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/progress_bar/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Progress bar'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Progress Bar'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = InicialDialog()
        
        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        
        # See if OK was pressed
        if result:
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.

            self.progress_bar = ProgessBarDialog()
            self.progress_bar.show()
            #ProgressBar.progress_bar.newTask('Calculating...')


            
class HeavyTask(QgsTask):
    """Here we subclass QgsTask"""
    def __init__(self, desc):
        QgsTask.__init__(self, desc)


    def run(self):
        """This function is where you do the 'heavy lifting' or implement
        the task which you want to run in a background thread. This function 
        must return True or False and should only interact with the main thread
        via signals"""
        
        calling_heavy_calc = 100
        chunk = calling_heavy_calc / 3

        cnt = 0
        bit = 33 / chunk  # percent / chunks. This example have 3 chuncks
        
        # chunk 1
        for i in range(0,int(chunk)):

            cnt+=bit
            time.sleep(0.2)
            self.setProgress(cnt)
            # --- QGIS bottom message bar
            iface.statusBarIface().showMessage("Processed {} %".format(int(cnt)))

        # chunk 2
        for i in range(0,int(chunk)):

            cnt+=bit
            time.sleep(0.2)
            self.setProgress(cnt)
            # --- QGIS bottom message bar
            iface.statusBarIface().showMessage("Processed {} %".format(int(cnt)))

        # chunk 3
        for i in range(0,int(chunk)):

            cnt+=bit
            time.sleep(0.2)
            self.setProgress(cnt)
            # --- QGIS bottom message bar
            iface.statusBarIface().showMessage("Processed {} %".format(int(cnt)))

        self.setProgress(100)
        # --- QGIS bottom message bar
        iface.statusBarIface().showMessage("Processed {} %".format(int(100)))
        return True


    def finished(self, result):
        """This function is called automatically when the task is completed and is
        called from the main thread so it is safe to interact with the GUI etc here"""
        if result is False:
            iface.messageBar().pushMessage('Task was cancelled')
        else:
            iface.messageBar().pushMessage('Task Complete')
            #iface.addRasterLayer(self.rasterOrLayer) # a resulting layer may be added to canvas here
            #ProgessBarDialog.btn_cancel.setEnabled(False)



class ProgessBarDialog(QDialog):
    def __init__(self, parent=None):
        QDialog.__init__(self, parent)
        self.resize(310, 140)
        self.lbl_info = QLabel('Info:', self) 
        self.lbl_info.move(40, 25) # label with Info
        self.edit_info = QLineEdit(self)
        self.edit_info.resize(170, 20)
        self.edit_info.move(100, 20) # Show changing messages
        self.prog = QProgressBar(self)
        self.prog.resize(230, 30)
        self.prog.move(40, 55) 
        self.newTask('Calculating...')
        btn_close = QPushButton('Close',self)
        btn_close.move(190, 100)
        btn_close.clicked.connect(self.close_win)
        # ProgessBarDialog.btn_cancel = QPushButton('Cancel Task', self)
        # ProgessBarDialog.btn_cancel.move(40, 100)
        # ProgessBarDialog.btn_cancel.clicked.connect(self.cancelTask)


    def newTask(self, message_task_description):
        """Create a task and add it to the Task Manager"""
        self.task = HeavyTask(message_task_description)
        #connect to signals from the background threads to perform gui operations
        #such as updating the progress bar
        self.task.begun.connect(lambda: self.edit_info.setText(self.task.description()))
        self.task.progressChanged.connect(lambda: self.prog.setValue(self.task.progress()))
        self.task.progressChanged.connect(lambda: self.setProgressBarAndMessages(self.task.progress()))
        self.task.taskCompleted.connect(lambda: self.edit_info.setText('Complete'))
        self.task.taskTerminated.connect(self.TaskCancelled)
        QgsApplication.taskManager().addTask(self.task)


    def setProgressBarAndMessages(self, val):
        #self.progressbar.setValue(val)
    # --- Progress bar in the QGIS user messages (top)
        if val <= 10:
            message = "Starting..."
            self.progressMessageBar = iface.messageBar().createMessage(message)
            self.progress = QProgressBar()
            self.progress.setMaximum(100)
            self.progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
            self.progressMessageBar.layout().addWidget(self.progress)
            iface.messageBar().pushWidget(self.progressMessageBar, Qgis.Info)
            self.progress.setValue(val)
        elif val < 50:
            message = "First half"
            self.progressMessageBar = iface.messageBar().createMessage(message)
            self.progress = QProgressBar()
            self.progress.setMaximum(100)
            self.progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
            self.progressMessageBar.layout().addWidget(self.progress)
            iface.messageBar().pushWidget(self.progressMessageBar, Qgis.Info)
            self.progress.setValue(val)
        elif val < 100:
            message = "Second Half"
            self.progressMessageBar = iface.messageBar().createMessage(message)
            self.progress = QProgressBar()
            self.progress.setMaximum(100)
            self.progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
            self.progressMessageBar.layout().addWidget(self.progress)
            iface.messageBar().pushWidget(self.progressMessageBar, Qgis.Info)
            self.progress.setValue(val)
        elif val == 100:
            message = "Complete"
            self.progressMessageBar = iface.messageBar().createMessage(message)
            self.progress = QProgressBar()
            self.progress.setMaximum(100)
            self.progress.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
            self.progressMessageBar.layout().addWidget(self.progress)
            iface.messageBar().pushWidget(self.progressMessageBar, Qgis.Info)
            self.progress.setValue(val)
            iface.messageBar().clearWidgets()


    def TaskCancelled(self):
        self.prog.setValue(0)
        self.edit_info.setText('Task Cancelled')


    def close_win(self):
        self.close()

    # def cancelTask(self):
    #     self.task.cancel()